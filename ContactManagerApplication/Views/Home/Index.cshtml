@model IEnumerable<Person>

<h1>Contact Managers</h1>

<form asp-action="UploadCsv" asp-controller="Home" enctype="multipart/form-data" method="post">
    <input type="file" name="file" />
    <button type="submit">Upload CSV</button>
</form>

<input type="text" id="filterInput" placeholder="Filter by any column..." onkeyup="filterTable()" class="form-control" style="margin-top: 30px; margin-bottom: 30px; width: 300px;" />

<table class="table" id="personsTable">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Name</th>
            <th onclick ="sortTable(1)">Date of Birth</th>
            <th onclick="sortTable(2)">Married</th>
            <th onclick="sortTable(3)">Phone</th>
            <th onclick="sortTable(4)">Salary</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var person in Model)
        {
            <tr>
                <td contenteditable="true" data-id="@person.Id" data-field="Name">@person.Name</td>
                <td contenteditable="true">@person.DateOfBirth.ToShortDateString()</td>
                <td contenteditable="true">@person.Married</td>
                <td contenteditable="true">@person.Phone</td>
                <td contenteditable="true">@person.Salary</td>
                <td>
                    <button class="btn btn-danger btn-sm" onclick="deleteRow(this)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    
    document.querySelectorAll('td[contenteditable="true"]').forEach(cell => {
        cell.addEventListener('blur', async () => {
            const id = cell.dataset.id; // Get the ID of the record
            const field = cell.dataset.field; // Get the field name
            const value = cell.textContent.trim(); // Get the new value

            // Send updated data to the server
            const response = await fetch('/Home/UpdatePerson', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id, field, value }),
            });

            const result = await response.json();
            if (!result.success) {
                alert('Update failed: ' + result.message);
            }
        });
    });

    function filterTable() {
        const input = document.getElementById("filterInput").value.toLowerCase();
        const table = document.getElementById("personsTable");
        const rows = table.getElementsByTagName("tr");

        for (let i = 1; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName("td");
            let matches = false;

            for (let j = 0; j < cells.length; j++) {
                if (cells[j].innerText.toLowerCase().includes(input)) {
                    matches = true;
                    break;
                }
            }

            rows[i].style.display = matches ? "" : "none";
        }
    }

    function sortTable(columnIndex) {
        const table = document.getElementById("personsTable");
        const rows = Array.from(table.getElementsByTagName("tr")).slice(1);
        const isAscending = table.getAttribute(`data-sort-${columnIndex}`) !== "asc";

        rows.sort((a, b) => {
            const cellA = a.getElementsByTagName("td")[columnIndex].innerText.trim();
            const cellB = b.getElementsByTagName("td")[columnIndex].innerText.trim();

            if (!isNaN(cellA) && !isNaN(cellB)) {
                return isAscending ? cellA - cellB : cellB - cellA;
            }

            return isAscending
                ? cellA.localeCompare(cellB)
                : cellB.localeCompare(cellA);
        });

        const tbody = table.getElementsByTagName("tbody")[0];
        rows.forEach(row => tbody.appendChild(row));

        table.setAttribute(`data-sort-${columnIndex}`, isAscending ? "asc" : "desc");
    }
    
    function deleteRow(button) {
        const row = button.parentNode.parentNode;
        row.remove();
    }
</script>